#+TITLE: Emacs Config
#+AUTHOR: Max Soneryd
#+STARTUP: overview
* General
** User Interface
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t) ;; Inhibit startup
  (scroll-bar-mode 0) ;; No scrollbars
  (tool-bar-mode 0) ;; No toolbar
  (menu-bar-mode 0) ;; No menubar
  (setq visual-bell t) ;; No yelling please
  (set-fringe-mode 10) ;; Breathing room
  (set-frame-parameter (selected-frame) 'alpha '(90 . 95))
  (add-to-list 'default-frame-alist '(alpha . (90 . 95)))  
#+END_SRC

** Package Sources
#+BEGIN_SRC emacs-lisp
  ;; Initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages")))
  
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  
  ;; Initialze use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Doom
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 10))
  
  (use-package doom-themes
    :init (load-theme 'doom-moonlight t))
#+END_src

** Line numbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  emms-playlist-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC 

** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package swiper)
  
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))
    :config
    (ivy-mode 1))
  
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
  
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))
  
  (use-package ivy-posframe
    :init (ivy-posframe-mode 1)
    :after ivy
    :config
    (setq ivy-posframe-display-functions-alist '(
                                                 (swiper . ivy-posframe-display-at-point)
                                                 (complete-symbol . ivy-posframe-display-at-point)
                                                 (counsel-M-x . ivy-posframe-display-at-frame-top-center)
                                                 (t . ivy-posframe-display-at-frame-top-center))))
#+END_SRC

* Programming
*** Elisp
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  ;;  (use-package rainbow-delimiters
  ;;    :hook (prog-mode . rainbow-delimiters-mode))  
#+END_SRC

* Packages
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))
#+END_SRC

* Packages
** Emms
#+BEGIN_SRC emacs-lisp
  (require 'emms-setup)
  (emms-standard)
  (emms-default-players)
  (advice-add 'emms-mode-line-playlist-current
              :filter-return #'file-name-nondirectory)
  
  (require 'emms-player-mplayer)
  (setq emms-player-list '(emms-player-mplayer))
  (setq emms-player-mplayer-parameters '("-novideo" "-slave"))  
#+END_src
   
** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " ▼"))
  
  (use-package org-bullets
    :after org
    :hook 
    (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
  
  (defun snrd/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (org-indent-mode 1))
  
  (use-package visual-fill-column
    :hook (org-mode . snrd/org-mode-visual-fill))
#+END_SRC
